{
  
    
        "post0": {
            "title": "Detectron 2 Example",
            "content": "!python -m pip install pyyaml==5.1 !python -m pip install torch torchvision # Detectron2 has not released pre-built binaries for the latest pytorch (https://github.com/facebookresearch/detectron2/issues/4053) # so we install from source instead. This takes a few minutes. !python -m pip install &quot;detectron2 @ git+https://github.com/facebookresearch/detectron2.git&quot; # Install pre-built detectron2 that matches pytorch version, if released: # See https://detectron2.readthedocs.io/tutorials/install.html for instructions #!pip install detectron2 -f https://dl.fbaipublicfiles.com/detectron2/wheels/{CUDA_VERSION}/{TORCH_VERSION}/index.html # exit(0) # After installation, you may need to &quot;restart runtime&quot; in Colab. This line can also restart runtime . import torch, detectron2 !nvcc --version TORCH_VERSION = &quot;.&quot;.join(torch.__version__.split(&quot;.&quot;)[:2]) CUDA_VERSION = torch.__version__.split(&quot;+&quot;)[-1] print(&quot;torch: &quot;, TORCH_VERSION, &quot;; cuda: &quot;, CUDA_VERSION) print(&quot;detectron2:&quot;, detectron2.__version__) . # Setup detectron2 logger import detectron2 from detectron2.utils.logger import setup_logger setup_logger() # import some common libraries import numpy as np import os, json, cv2, random from google.colab.patches import cv2_imshow # import some common detectron2 utilities from detectron2 import model_zoo from detectron2.engine import DefaultPredictor from detectron2.config import get_cfg from detectron2.utils.visualizer import Visualizer from detectron2.data import MetadataCatalog, DatasetCatalog . im = cv2.imread(&quot;./Assets/detectron2-input.jpg&quot;) #cv2_imshow(im) cfg = get_cfg() # add project-specific config (e.g., TensorMask) here if you&#39;re not running a model in detectron2&#39;s core library cfg.merge_from_file(model_zoo.get_config_file(&quot;COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml&quot;)) cfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.5 # set threshold for this model # Find a model from detectron2&#39;s model zoo. You can use the https://dl.fbaipublicfiles... url as well cfg.MODEL.WEIGHTS = model_zoo.get_checkpoint_url(&quot;COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml&quot;) predictor = DefaultPredictor(cfg) outputs = predictor(im) # look at the outputs. See https://detectron2.readthedocs.io/tutorials/models.html#model-output-format for specification print(outputs[&quot;instances&quot;].pred_classes) print(outputs[&quot;instances&quot;].pred_boxes) # We can use `Visualizer` to draw the predictions on the image. v = Visualizer(im[:, :, ::-1], MetadataCatalog.get(cfg.DATASETS.TRAIN[0]), scale=1.2) out = v.draw_instance_predictions(outputs[&quot;instances&quot;].to(&quot;cpu&quot;)) cv2_imshow(out.get_image()[:, :, ::-1]) .",
            "url": "https://lab.jyje.me/detection/facebook/2022/08/15/Detectron2_example.html",
            "relUrl": "/detection/facebook/2022/08/15/Detectron2_example.html",
            "date": " • Aug 15, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Basic Data Plotting",
            "content": "Meow? . This plotting was originally drawn in Simona Riva&#39;s article. Hello, Cat World! . *World&#39;s Cat Day . import numpy as np import matplotlib.pyplot as plt t = np.arange(0,2*np.pi,0.01) x = -721/4*np.sin(t)+196/3*np.sin(2*t)-86/3*np.sin(3*t)-131/2*np.sin(4*t) +477/14*np.sin(5*t)+27*np.sin(6*t)-29/2*np.sin(7*t)+68/5*np.sin(8*t) +1/10*np.sin(9*t)+23/4*np.sin(10*t)-19/2*np.sin(12*t)-85/21*np.sin(13*t) +2/3*np.sin(14*t)+27/5*np.sin(15*t)+7/4*np.sin(16*t)+17/9*np.sin(17*t) -4*np.sin(18*t)-1/2*np.sin(19*t)+1/6*np.sin(20*t)+6/7*np.sin(21*t) -1/8*np.sin(22*t)+1/3*np.sin(23*t)+3/2*np.sin(24*t)+13/5*np.sin(25*t) +np.sin(26*t)-2*np.sin(27*t)+3/5*np.sin(28*t)-1/5*np.sin(29*t) +1/5*np.sin(30*t)+(2337*np.cos(t))/8-43/5*np.cos(2*t)+322/5*np.cos(3*t) -117/5*np.cos(4*t)-26/5*np.cos(5*t)-23/3*np.cos(6*t)+143/4*np.cos(7*t) -11/4*np.cos(8*t)-31/3*np.cos(9*t)-13/4*np.cos(10*t)-9/2*np.cos(11*t) +41/20*np.cos(12*t)+8*np.cos(13*t)+2/3*np.cos(14*t)+6*np.cos(15*t) +17/4*np.cos(16*t)-3/2*np.cos(17*t)-29/10*np.cos(18*t)+11/6*np.cos(19*t) +12/5*np.cos(20*t)+3/2*np.cos(21*t)+11/12*np.cos(22*t)-4/5*np.cos(23*t) +np.cos(24*t)+17/8*np.cos(25*t)-7/2*np.cos(26*t)-5/6*np.cos(27*t) -11/10*np.cos(28*t)+1/2*np.cos(29*t)-1/5*np.cos(30*t) y = -637/2*np.sin(t)-188/5*np.sin(2*t)-11/7*np.sin(3*t)-12/5*np.sin(4*t) +11/3*np.sin(5*t)-37/4*np.sin(6*t)+8/3*np.sin(7*t)+65/6*np.sin(8*t) -32/5*np.sin(9*t)-41/4*np.sin(10*t)-38/3*np.sin(11*t)-47/8*np.sin(12*t) +5/4*np.sin(13*t)-41/7*np.sin(14*t)-7/3*np.sin(15*t)-13/7*np.sin(16*t) +17/4*np.sin(17*t)-9/4*np.sin(18*t)+8/9*np.sin(19*t)+3/5*np.sin(20*t) -2/5*np.sin(21*t)+4/3*np.sin(22*t)+1/3*np.sin(23*t)+3/5*np.sin(24*t) -3/5*np.sin(25*t)+6/5*np.sin(26*t)-1/5*np.sin(27*t)+10/9*np.sin(28*t) +1/3*np.sin(29*t)-3/4*np.sin(30*t)-(125*np.cos(t))/2-521/9*np.cos(2*t) -359/3*np.cos(3*t)+47/3*np.cos(4*t)-33/2*np.cos(5*t)-5/4*np.cos(6*t) +31/8*np.cos(7*t)+9/10*np.cos(8*t)-119/4*np.cos(9*t)-17/2*np.cos(10*t) +22/3*np.cos(11*t)+15/4*np.cos(12*t)-5/2*np.cos(13*t)+19/6*np.cos(14*t) +7/4*np.cos(15*t)+31/4*np.cos(16*t)-np.cos(17*t)+11/10*np.cos(18*t) -2/3*np.cos(19*t)+13/3*np.cos(20*t)-5/4*np.cos(21*t)+2/3*np.cos(22*t) +1/4*np.cos(23*t)+5/6*np.cos(24*t)+3/4*np.cos(26*t)-1/2*np.cos(27*t) -1/10*np.cos(28*t)-1/3*np.cos(29*t)-1/19*np.cos(30*t) plt.xlim(-650,600) plt.ylim(-500,500) plt.plot(x,y) plt.show() .",
            "url": "https://lab.jyje.me/plotting/cat/2022/08/08/basic_data_plotting.html",
            "relUrl": "/plotting/cat/2022/08/08/basic_data_plotting.html",
            "date": " • Aug 8, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Lab",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://lab.jyje.me/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://lab.jyje.me/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}